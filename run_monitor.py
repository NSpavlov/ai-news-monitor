#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import logging
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏
sys.path.append('./')

from ai_news_monitor import AINewsMonitor

def main():
    """–ó–∞–ø—É—Å–∫ AI News Monitor –¥–ª—è daemon task"""
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    log_file = f'./logs/ai_news_{datetime.now().strftime("%Y%m%d")}.log'
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )
    
    logging.info("=" * 60)
    logging.info("ü§ñ –ó–∞–ø—É—Å–∫ AI News Monitor (Daemon Task)")
    logging.info(f"‚è∞ –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logging.info("=" * 60)
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä
        monitor = AINewsMonitor()
        monitor.run_once()
        
        logging.info("‚úÖ AI News Monitor –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ AI News Monitor: {e}")
        import traceback
        logging.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()